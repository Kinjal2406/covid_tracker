{"version":3,"sources":["components/loding.jsx","components/CountryTable.jsx","components/Chart.jsx","components/covid.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Loading","className","role","CountryTable","this","props","countries","onSortByTotal","onSortByCountryName","onRowSelected","href","onClick","map","country","key","name","style","selected","backgroundColor","total","Component","Chart","length","data","labels","datasets","colors","width","height","options","maintainAspectRatio","Covid","state","allCountryTotal","selectedCountries","url","handleOnRowSelected","countryToUpdate","countryIndex","findIndex","c","setState","filter","sortByTotal","countryA","countryB","handleonSortByTotal","event","handleonSortBy","sortByCountryName","handleonSortByCountryName","sortOperation","preventDefault","sort","axios","get","response","rows","split","i","row","j","columns","countryName","replace","Number","push","Promise","x","setTimeout","console","log","toString","textAlign","numberWithCommas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"oJAUeA,G,kBARC,WACZ,OACI,yBAAKC,UAAU,4BAA4BC,KAAK,UAC5C,0BAAMD,UAAU,WAAhB,iB,8EC2CGE,E,uKA5CF,IAAD,EACqEC,KAAKC,MAAvEC,EADH,EACGA,UAAWC,EADd,EACcA,cAAeC,EAD7B,EAC6BA,oBAAqBC,EADlD,EACkDA,cACtD,OAAS,2BAAOR,UAAU,uBACtB,+BACI,4BACI,4BACA,uBAAGS,KAAK,IAAIC,QAASH,GAArB,YAIA,4BACI,uBAAGE,KAAK,IAAIC,QAASJ,GAArB,YAQZ,+BAEQD,EAAUM,KAAI,SAAAC,GAIV,OACI,wBAAIC,IAAKD,EAAQE,KACbC,MAAOH,EAAQI,SALV,CACTC,gBAAiB,eAIqB,KAClCP,QAAS,kBAAIF,EAAcI,KAE3B,4BAAKA,EAAQE,MACb,4BAAKF,EAAQM,WAZjC,U,GArBeC,a,QCgCZC,E,uKA7BF,IACKf,EAAaF,KAAKC,MAAlBC,UAEN,GAAsB,IAAnBA,EAAUgB,OAAY,OAAO,8BAEhC,IAAMC,EAAM,CACRC,OAAQlB,EAAUM,KAAI,SAACC,GAAD,OAAYA,EAAQE,QAC1CU,SAAS,CACL,CACIF,KAAKjB,EAAUM,KAAI,SAAAC,GAAO,OAAEA,EAAQM,SACpCD,gBAAkBQ,KAM9B,OAAQ,6BACA,kBAAC,IAAD,CACIH,KAAMA,EACNI,MAAO,IACPC,OAAQ,IACRC,QAAU,CAACC,qBAAoB,U,GAvBnCV,aAiChBM,EAAO,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WCmGnXK,E,4MA/HXC,MAAQ,CACJ1B,UAAU,GACV2B,gBAAgB,EAChBC,kBAAkB,I,EAGtBC,IAAM,4F,EAsCVC,oBAAuB,SAACC,GACpB,IAAM/B,EAAS,YAAO,EAAK0B,MAAM1B,WAE3BgC,EAAehC,EAAUiC,WAC3B,SAACC,GAAD,OAAKA,EAAEzB,OAAQsB,EAAgBtB,QAG7BF,EAAS,CACXE,KAAMsB,EAAgBtB,KACtBI,MAAOkB,EAAgBlB,MACvBF,UAAUoB,EAAgBpB,UAG9BX,EAAUgC,GAAgBzB,EAC1B,EAAK4B,SAAS,CAACnC,YAAU4B,kBAAmB5B,EAAUoC,QAAO,SAACF,GAAD,OAAKA,EAAEvB,e,EAMxE0B,YAAc,SAACC,EAAUC,GAKrB,OAAGA,EAAS1B,MAAQyB,EAASzB,MAAc,EACnC0B,EAAS1B,MAAQyB,EAASzB,OAAe,EACrC,G,EAGhB2B,oBAAsB,SAACC,GACnB,EAAKC,eAAeD,EAAO,EAAKJ,c,EAGpCM,kBAAoB,SAACL,EAAUC,GAK3B,OAAGD,EAAS7B,KAAO8B,EAAS9B,KAAa,EACjC6B,EAAS7B,KAAO8B,EAAS9B,MAAc,EACnC,G,EAGhBmC,0BAA4B,SAACH,GAC1B,EAAKC,eAAeD,EAAO,EAAKE,oB,EAGnCD,eAAiB,SAACD,EAAMI,GACpBJ,EAAMK,iBACN,IAAM9C,EAAS,YAAO,EAAK0B,MAAM1B,WACjCA,EAAU+C,KAAKF,GACf,EAAKV,SAAS,CAACnC,e,oNAtFQgD,IAAMC,IAAInD,KAAK+B,K,OAAhCqB,E,OACAC,EAAOD,EAASjC,KAAKmC,MAAM,MAE3BpD,EAAY,GACd2B,EAAkB,EAEd0B,EAAE,E,YAAGA,EAAEF,EAAKnC,Q,iBAIhB,IAFMsC,EAAMH,EAAKE,GAAGD,MAAM,kCAElBG,EAAE,EAAEA,EAAED,EAAItC,OAAOuC,IAEfC,EAAUF,EAAIC,GAAGH,MAAM,iCAEvBK,EAAcD,EAAQ,GAAGE,QAAQ,KAAM,IACvC7C,EAAQ8C,OAAOH,EAAQ,IAEV,KAAhBC,IAECzD,EAAU4D,KAAK,CACXnD,KAAMgD,EACN5C,MAAOA,IAEVc,GAAmBd,G,iBAItB,IAAIgD,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAE,M,QACtCE,QAAQC,IAAItC,G,QAtBa0B,I,uBAyB7BvD,KAAKqC,SAAS,CAACnC,YAAY2B,oB,8IA0DdmC,GACb,OAAOA,EAAEI,WAAWR,QAAQ,wBAAyB,O,+BAG/C,IAAD,EACoD5D,KAAK4B,MAAtD1B,EADH,EACGA,UAAW2B,EADd,EACcA,gBAAiBC,EAD/B,EAC+BA,kBACpC,OACI,6BACI,wBAAIlB,MAAO,CAAEyD,UAAW,WAAxB,qBACuBrE,KAAKsE,iBAAiBzC,IAExB,IAApBA,EAAwB,kBAAC,EAAD,MACrB,6BACA,kBAAC,EAAD,CAAO3B,UAAW4B,IAClB,kBAAC,EAAD,CAAc5B,UAAWA,EACrBC,cAAeH,KAAK0C,oBACpBtC,oBAAqBJ,KAAK8C,0BAC1BzC,cAAeL,KAAKgC,4B,GArHpBhB,aCILuD,MALf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.afd405f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return(\r\n        <div className=\"spinner-grow text-primary\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Loading","import React, { Component } from 'react';\r\n\r\nclass CountryTable extends Component{\r\n    \r\n    render(){\r\n        const {countries, onSortByTotal, onSortByCountryName, onRowSelected, } = this.props;\r\n        return ( <table className=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                    <a href=\"/\" onClick={onSortByCountryName}>\r\n                        Country\r\n                    </a>\r\n                    </th>\r\n                    <th>\r\n                        <a href=\"/\" onClick={onSortByTotal}>\r\n                        Total\r\n                        </a>\r\n                    </th>\r\n                </tr>\r\n                \r\n            </thead>\r\n\r\n            <tbody>\r\n                {\r\n                    countries.map(country => {\r\n                        const style ={\r\n                            backgroundColor: \"lightYellow\",\r\n                        };\r\n                        return (\r\n                            <tr key={country.name}\r\n                                style={country.selected ? style : null}\r\n                                onClick={()=>onRowSelected(country)}\r\n                            >\r\n                                <td>{country.name}</td>\r\n                                <td>{country.total}</td>\r\n                            </tr> \r\n                        );\r\n                    })\r\n                };           \r\n\r\n            </tbody>            \r\n        </table>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryTable","import React, { Component } from 'react';\r\nimport {Pie} from \"react-chartjs-2\";\r\n\r\nclass Chart extends Component{\r\n\r\n    render(){\r\n            const{countries} = this.props;\r\n\r\n            if(countries.length===0) return <div></div>;\r\n\r\n            const data ={\r\n                labels: countries.map((country)=> country.name),\r\n                datasets:[\r\n                    {\r\n                        data:countries.map(country=>country.total),\r\n                        backgroundColor : colors,\r\n                    },\r\n                ],\r\n            };\r\n        \r\n            //console.table(countries);\r\n            return( <div>\r\n                    <Pie \r\n                        data={data} \r\n                        width={100} \r\n                        height={200} \r\n                        options ={{maintainAspectRatio:false}}\r\n                    >    \r\n                    </Pie>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n\r\nlet colors=['#4D4D4D', '#999999', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'];","import React, {Component} from \"react\";\r\nimport Loading from \"./loding\";\r\nimport axios from \"axios\";\r\nimport { createPortal } from \"react-dom\";\r\nimport CountryTable from \"./CountryTable\";\r\nimport Chart from \"./Chart\";\r\n\r\nclass Covid extends Component{\r\n    state = { \r\n        countries:[],\r\n        allCountryTotal:0,\r\n        selectedCountries:[],\r\n    };\r\n\r\n    url = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\r\n\r\nasync componentDidMount() {   \r\n    \r\n    const response = await axios.get(this.url);\r\n    const rows = response.data.split(\"\\n\"); \r\n\r\n    const countries = [];\r\n    let allCountryTotal = 0;\r\n    \r\n    for(let i=1; i<rows.length ; i++)\r\n    {\r\n        const row = rows[i].split(/, (?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        \r\n        for(let j=0;j<row.length;j++)\r\n        {\r\n            const columns = row[j].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n            \r\n            const countryName = columns[0].replace(/\"/g, \"\");\r\n            const total = Number(columns[4]);\r\n\r\n            if(countryName !== \"\")\r\n            {\r\n                countries.push({\r\n                    name: countryName,\r\n                    total: total,\r\n                });\r\n                 allCountryTotal += total;\r\n             }\r\n        }\r\n\r\n        await new Promise((x) => setTimeout(x,1));\r\n        console.log(allCountryTotal);\r\n        \r\n    }\r\n    this.setState({countries , allCountryTotal}); \r\n}\r\n\r\nhandleOnRowSelected =  (countryToUpdate )=>{\r\n    const countries = [...this.state.countries];\r\n\r\n    const countryIndex = countries.findIndex(\r\n        (c)=>c.name ===countryToUpdate.name\r\n    );\r\n\r\n    const country ={\r\n        name: countryToUpdate.name,\r\n        total: countryToUpdate.total,\r\n        selected:!countryToUpdate.selected,\r\n    };\r\n\r\n    countries[countryIndex] = country;\r\n    this.setState({countries,selectedCountries: countries.filter((c)=>c.selected),\r\n    \r\n    });\r\n\r\n};\r\n\r\nsortByTotal = (countryA, countryB)=>{\r\n\r\n    //0 equal\r\n    //1 greater\r\n    //-1 less\r\n    if(countryB.total > countryA.total) return 1;\r\n    else if(countryB.total < countryA.total) return -1;\r\n    else return 0;\r\n} \r\n\r\nhandleonSortByTotal = (event)=>{\r\n    this.handleonSortBy(event, this.sortByTotal);\r\n};\r\n\r\nsortByCountryName = (countryA, countryB)=>{\r\n\r\n    //0 equal\r\n    //1 greater\r\n    //-1 less\r\n    if(countryA.name > countryB.name) return 1;\r\n    else if(countryA.name < countryB.name) return -1;\r\n    else return 0;\r\n} \r\n\r\nhandleonSortByCountryName = (event) => { \r\n   this.handleonSortBy(event, this.sortByCountryName);\r\n};\r\n\r\nhandleonSortBy = (event,sortOperation) => {\r\n    event.preventDefault();\r\n    const countries = [...this.state.countries];\r\n    countries.sort(sortOperation);\r\n    this.setState({countries});\r\n}\r\n\r\nnumberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nrender() {\r\n    const { countries, allCountryTotal, selectedCountries} = this.state;\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: \"center\"}}>\r\n                All Country Total:{this.numberWithCommas(allCountryTotal)}\r\n            </h1>\r\n            {allCountryTotal === 0 ? <Loading/> :( \r\n                <div>\r\n                <Chart countries={selectedCountries}/>\r\n                <CountryTable countries={countries}\r\n                    onSortByTotal={this.handleonSortByTotal}\r\n                    onSortByCountryName={this.handleonSortByCountryName}\r\n                    onRowSelected={this.handleOnRowSelected}\r\n                />\r\n                </div>\r\n            )}\r\n        \r\n        </div>\r\n     );\r\n}\r\n\r\n}\r\n\r\nexport default Covid;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Loading from \"./components/loding\";\nimport Covid from './components/covid';\n\nfunction App() {\n  return <Covid/>;\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}